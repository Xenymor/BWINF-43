Labyrinthe:
Breitensuche in 4d Labyrinth geht nur bis Beispiel 4 (dann zu langsam)
A* mit simplem Maximum der Manhattan-Distanzen hat gleiches Problem
Heuristiken:
	- Maximum der Lösungen der einzelnen Labyrinthe
	- Verrechnung der beiden Lösungswege (l1 + 1/(l2+1) (funktioniert)
	- Geometrisches Mittel schlechter
Einführen von BitSet (Zeit *0,6)
Map durch Array ersetzen (Zeit *0,25)
	Problem nur 128*128 möglich und 10gb RAM benötigt
Array durch Map ersetzen, weil größere Maps erwünscht
Heuristik sqrt((a^2+b^2)/2)) um faktor 2,1 schlechter
Überraschenderweise Check benötigt für kürzere Distanz beim zweiten mal erreichen
Bug: Kürzere Distanzen nicht nochmal überprüft
Heuristik Weighted Average besser, bei Gewichten 0,999 und 0,001

Erweiterungsideen:
- n-Labyrinthe
- unterschiedlich große Labyrinthe
- unterschiedliche Start/Endpunkte